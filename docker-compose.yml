#indica la version de Docker Compose utilizada
version: '3.8'
#Bloque de servicios, indica los contenedores a utilizar.
services:

  db:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
    volumes:
      - ./postgres-data-microservice:/db/postgresql/data
      - ./sql/data-h2.sql:/docker-entrypoint-initdb.d/data-h2.sql
      - ./sql/event-h2.sql:/docker-entrypoint-initdb.d/event-h2.sql
      - ./sql/noti-h2.sql:/docker-entrypoint-initdb.d/noti-h2.sql
    networks:
      - red-app

  config-server: #nombre del servicio
    image: aliciac07/config-server  #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8888:8888
    env_file:
      - .env
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp

  eureka-server:       #nombre del servicio
    image: aliciac07/eureka-server  #imagen utilizada si viene del registro.
    hostname: eureka-server
    restart: always
    ports:          #puertos que estaran expuestos.
      - 8761:8761
    env_file:
      - .env
    networks:    #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on:
      - config-server

  api-gateway: #nombre del servicio
    image: aliciac07/api-gateway  #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8080:8080
    env_file:
      - .env
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on:
      - config-server
      - eureka-server

  user-microservice: #nombre del servicio
    image: aliciac07/user-microservice:1.1 #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8083:8083
    env_file:
      - .env
    environment: #variable de ambiente
      - spring.datasource.url=jdbc:postgresql://db:5432/user_data
      - spring.datasource.username=postgres
      - spring.datasource.password=password
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on: #indica que primero debe subir los servicios indicados.
      - config-server
      - eureka-server
      - api-gateway
      - db

  user-microservice-2: #nombre del servicio
    image: aliciac07/user-microservice:1.1 #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8086:8086
    env_file:
      - .env
    environment: #variable de ambiente
      - spring.datasource.url=jdbc:postgresql://db:5432/user_data
      - spring.datasource.username=postgres
      - spring.datasource.password=password
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on: #indica que primero debe subir los servicios indicados.
      - config-server
      - eureka-server
      - api-gateway
      - db

  user-microservice-3: #nombre del servicio
    image: aliciac07/user-microservice:1.1 #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8087:8087
    env_file:
      - .env
    environment: #variable de ambiente
      - spring.datasource.url=jdbc:postgresql://db:5432/user_data
      - spring.datasource.username=postgres
      - spring.datasource.password=password
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on: #indica que primero debe subir los servicios indicados.
      - config-server
      - eureka-server
      - api-gateway
      - db

  event-microservice: #nombre del servicio
    image: aliciac07/event-microservice #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8082:8082
    env_file:
      - .env
    environment: #variable de ambiente
      - spring.datasource.url=jdbc:postgresql://db:5432/events_data
      - spring.datasource.username=postgres
      - spring.datasource.password=password
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on: #indica que primero debe subir los servicios indicados.
      - config-server
      - eureka-server
      - api-gateway
      - db


  event-microservice-2: #nombre del servicio
    image: aliciac07/event-microservice #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8088:8088
    env_file:
      - .env
    environment: #variable de ambiente
      - spring.datasource.url=jdbc:postgresql://db:5432/events_data
      - spring.datasource.username=postgres
      - spring.datasource.password=password
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on: #indica que primero debe subir los servicios indicados.
      - config-server
      - eureka-server
      - api-gateway
      - db

  event-microservice-3: #nombre del servicio
    image: aliciac07/event-microservice #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8089:8089
    env_file:
      - .env
    environment: #variable de ambiente
      - spring.datasource.url=jdbc:postgresql://db:5432/events_data
      - spring.datasource.username=postgres
      - spring.datasource.password=password
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on: #indica que primero debe subir los servicios indicados.
      - config-server
      - eureka-server
      - api-gateway
      - db

  notification-microservice: #nombre del servicio
    image: aliciac07/notification-microservice #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8084:8084
    env_file:
      - .env
    environment: #variable de ambiente
      - spring.datasource.url=jdbc:postgresql://db:5432/notification_data
      - spring.datasource.username=postgres
      - spring.datasource.password=password
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on: #indica que primero debe subir los servicios indicados.
      - config-server
      - eureka-server
      - api-gateway
      - db

  notification-microservice-2: #nombre del servicio
    image: aliciac07/notification-microservice #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8090:8090
    env_file:
      - .env
    environment: #variable de ambiente
      - spring.datasource.url=jdbc:postgresql://db:5432/notification_data
      - spring.datasource.username=postgres
      - spring.datasource.password=password
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on: #indica que primero debe subir los servicios indicados.
      - config-server
      - eureka-server
      - api-gateway
      - db

  notification-microservice-3: #nombre del servicio
    image: aliciac07/notification-microservice #imagen utilizada si viene del registro.
    restart: always
    ports: #puertos que estaran expuestos.
      - 8092:8092
    env_file:
      - .env
    environment: #variable de ambiente
      - spring.datasource.url=jdbc:postgresql://db:5432/notification_data
      - spring.datasource.username=postgres
      - spring.datasource.password=password
    networks: #red para conectar los equipos.
      - red-app
    volumes:
      - my-volume-compose:/tmp
    depends_on: #indica que primero debe subir los servicios indicados.
      - config-server
      - eureka-server
      - api-gateway
      - db

  photo-phactory:
    image: dreamy236/photo-phactory:latest
    network_mode: host
networks:  #bloque para las redes
  red-app:   #indicando la red definida

volumes: #Bloque para definir los volumenes
  my-volume-compose:
  volume:
  postgres-data-microservice:
